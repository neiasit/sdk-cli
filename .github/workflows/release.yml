name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.22.5

      - name: Build CLI
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -o neiasit${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/cli

#      - name: Sign macOS binary
#        if: matrix.goos == 'darwin'
#        run: |
#          echo ${{ secrets.APPLE_CERTIFICATE }} | base64 --decode > /tmp/certificate.p12
#          security create-keychain -p "actions" build.keychain
#          security import /tmp/certificate.p12 -k build.keychain -P ${{ secrets.CERTIFICATE_PASSWORD }} -A
#          security list-keychains -s build.keychain
#          security unlock-keychain -p "actions" build.keychain
#          security set-key-partition-list -S apple-tool:,apple: -s -k "actions" build.keychain
#          codesign --deep --force --verbose --sign "Developer ID Application: Your Name (TEAMID)" neiasit

      - name: Archive neiasit binary
        run: |
          zip neiasit-${{ matrix.goos }}-${{ matrix.goarch }}.zip neiasit${{ matrix.goos == 'windows' && '.exe' || '' }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: neiasit-${{ matrix.goos }}-${{ matrix.goarch }}
          path: neiasit-${{ matrix.goos }}-${{ matrix.goarch }}.zip

  test:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: neiasit-${{ matrix.os == 'ubuntu-latest' && 'linux-amd64' || matrix.os == 'macos-latest' && 'darwin-amd64' || 'windows-amd64' }}
          path: .

      - name: Extract Artifact on Linux
        if: matrix.os == 'ubuntu-latest'
        run: unzip neiasit-linux-amd64.zip

#      - name: Extract Artifact on macOS
#        if: matrix.os == 'macos-latest'
#        run: unzip neiasit-darwin-amd64.zip

      - name: Extract Artifact on Windows
        if: matrix.os == 'windows-latest'
        run: Expand-Archive -Path neiasit-windows-amd64.zip -DestinationPath .

      - name: Run CLI on Linux
        if: matrix.os == 'ubuntu-latest'
        run: ./neiasit --help

#      - name: Run CLI on macOS
#        if: matrix.os == 'macos-latest'
#        run: ./neiasit --help

      - name: Run CLI on Windows
        if: matrix.os == 'windows-latest'
        run: ./neiasit.exe --help

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download Artifact for Linux
        uses: actions/download-artifact@v2
        with:
          name: neiasit-linux-amd64
          path: .

#      - name: Download Artifact for macOS
#        uses: actions/download-artifact@v2
#        with:
#          name: neiasit-darwin-amd64
#          path: .

      - name: Download Artifact for Windows
        uses: actions/download-artifact@v2
        with:
          name: neiasit-windows-amd64
          path: .

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./neiasit-linux-amd64.zip
          asset_name: neiasit-linux-amd64.zip
          asset_content_type: application/zip

#      - name: Upload Release Asset for macOS
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./neiasit-darwin-amd64.zip
#          asset_name: neiasit-darwin-amd64.zip
#          asset_content_type: application/zip

      - name: Upload Release Asset for Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./neiasit-windows-amd64.zip
          asset_name: neiasit-windows-amd64.zip
          asset_content_type: application/zip
